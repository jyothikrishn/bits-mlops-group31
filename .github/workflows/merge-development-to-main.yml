name: Python CI

on:
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    needs: lint  
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: myenv
          environment-file: environment.yml
          python-version: 3.8
          auto-activate-base: false
          auto-update-conda: true

      - name: Initialize conda
        shell: bash -l {0}
        run: |
          conda init bash
          source ~/.bashrc

      - name: Install dependencies
        shell: bash -l {0}
        run: |
          conda activate myenv
          conda info
          conda list
          pip install -r requirements.txt

      - name: Test with pytest
        shell: bash -l {0}
        run: |
          conda activate myenv
          python -m pytest

  build:
      needs: test
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ap-south-1 

        - name: Log in to ECR
          run: |
            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 055177035138.dkr.ecr.ap-south-1.amazonaws.com

        - name: Build Docker image
          run: |
            docker build -t inferencer .

        - name: Tag Docker image
          run: |
            docker tag inferencer:latest 055177035138.dkr.ecr.ap-south-1.amazonaws.com/jyothik:latest

        - name: Save Docker image for deploy step
          uses: actions/upload-artifact@v2
          with:
            name: inferencer
            path: docker save inferencer | gzip > docker-image.tar.gz

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1 

      - name: Log in to ECR
        run: |
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 055177035138.dkr.ecr.ap-south-1.amazonaws.com

      - name: Download Docker image from build step
        uses: actions/download-artifact@v2
        with:
          name: inferencer
          path: .

      - name: Load Docker image
        run: |
          gunzip -c docker-image.tar.gz | docker load

      - name: Push Docker image to ECR
        run: |
          docker push 055177035138.dkr.ecr.ap-south-1.amazonaws.com/jyothik:latest
